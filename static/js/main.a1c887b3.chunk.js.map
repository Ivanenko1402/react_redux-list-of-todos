{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","defaultValue","query","status","value","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","useState","visibleTodos","setVisibleTodos","useEffect","correctListOfTodos","completed","title","toLowerCase","includes","sortTodos","Boolean","length","className","map","classNames","id","onClick","targetTodo","find","setTargetTodo","TodoFilter","onSubmit","event","preventDefault","onChange","target","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getTodos","getUser","userId","Loader","TodoModal","user","setUser","isLoading","setIsLoading","a","newUser","Error","setTargetUser","href","email","name","App","todosFromServer","loadingTodosFromServer","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a1c887b3.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = { type: 'currentTodo/SET'; payload: Todo; };\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype AddQuery = {\n  type: 'filter/QUERY',\n  payload: string,\n};\n\ntype AddFilterValue = {\n  type: 'filter/STATUS',\n  payload: Status,\n};\n\ntype Action = AddQuery | AddFilterValue;\n\nconst setQuery = (value: string): AddQuery => (\n  { type: 'filter/QUERY', payload: value }\n);\nconst setStatus = (value: Status): AddFilterValue => (\n  { type: 'filter/STATUS', payload: value }\n);\n\nconst defaultValue = {\n  query: '',\n  status: 'all',\n};\n\nexport const actions = { setQuery, setStatus };\n\nconst filterReducer = (state = defaultValue, action: Action) => {\n  switch (action.type) {\n    case 'filter/QUERY':\n      return { ...state, query: action.payload };\n\n    case 'filter/STATUS':\n      return { ...state, status: action.payload };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype AddAction = { type: 'todos/LOADING', payload: Todo[] };\nconst setTodos = (todos: Todo[]) => ({ type: 'todos/LOADING', payload: todos });\n\nexport const actions = { setTodos };\n\nconst todosReducer = (todos: Todo[] = [], action: AddAction): Todo[] => {\n  switch (action.type) {\n    case 'todos/LOADING':\n      return [...action.payload];\n\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const { query, status } = useAppSelector(state => state.filter);\n  const [visibleTodos, setVisibleTodos] = useState<Todo[]>([...todos]);\n\n  function sortTodos() {\n    let correctListOfTodos;\n\n    switch (status) {\n      case 'active':\n        correctListOfTodos = [...todos].filter(todo => !todo.completed);\n        break;\n\n      case 'completed':\n        correctListOfTodos = [...todos].filter(todo => todo.completed);\n        break;\n\n      default:\n        correctListOfTodos = [...todos];\n        break;\n    }\n\n    setVisibleTodos(correctListOfTodos.filter(todo => (\n      todo.title.toLowerCase()).includes(query.toLowerCase())));\n  }\n\n  useEffect(() => {\n    sortTodos();\n  }, [query, status]);\n\n  function setTargetTodo(id: number) {\n    const targetTodo = todos.find(todo => todo.id === id);\n\n    if (targetTodo) {\n      dispatch(actions.setTodo(targetTodo));\n    }\n  }\n\n  return (\n    <>\n      {Boolean(!visibleTodos.length) && (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n\n      <table className=\"table is-narrow is-fullwidth\">\n        <thead>\n          <tr>\n            <th>#</th>\n\n            <th>\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </th>\n\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {visibleTodos.map(todo => (\n            <tr\n              key={todo.id}\n              className={classNames({\n                'has-background-info-light': currentTodo?.id === todo.id,\n              })}\n              data-cy=\"todo\"\n            >\n              <td className=\"is-vcentered\">{todo.id}</td>\n              <td className=\"is-vcentered\">\n                {todo.completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n\n              <td className=\"is-vcentered is-expanded\">\n                <p className={classNames({\n                  'has-text-danger': !todo.completed,\n                  'has-text-success': todo.completed,\n                })}\n                >\n                  {todo.title}\n                </p>\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => setTargetTodo(todo.id)}\n\n                >\n                  <span className=\"icon\">\n                    <i className={classNames('far', {\n                      'fa-eye-slash': currentTodo?.id === todo.id,\n                      'far fa-eye': currentTodo?.id !== todo.id,\n                    })}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { query } = useAppSelector(state => state.filter);\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={\n              (event) => dispatch(\n                actions.setStatus(event.target.value as Status),\n              )\n            }\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => dispatch(actions.setQuery(event.target.value))}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              aria-label=\"delete\"\n              onClick={() => dispatch(actions.setQuery(''))}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getUser } from '../../api';\nimport { useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\nexport const TodoModal: React.FC = () => {\n  const dispatch = useDispatch();\n  const targetTodo = useAppSelector(state => state.currentTodo);\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  async function setTargetUser() {\n    if (!targetTodo) {\n      setUser(null);\n\n      return;\n    }\n\n    setIsLoading(true);\n    const newUser = await getUser(targetTodo.userId);\n\n    try {\n      setUser(newUser);\n    } catch {\n      throw new Error();\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  useEffect(() => {\n    setTargetUser();\n  }, [targetTodo]);\n\n  function removeTargetTodo() {\n    dispatch(actions.removeTodo());\n  }\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? <Loader /> : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${targetTodo?.id}`}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              aria-label=\"button\"\n              onClick={() => removeTargetTodo()}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">{targetTodo?.title}</p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {\n                targetTodo?.completed ? (\n                  <strong className=\"has-text-success\">Done</strong>\n                ) : (\n                  <strong className=\"has-text-danger\">Planned</strong>\n                )\n              }\n              {' by '}\n              <a href={`mailto:${user?.email}`}>{user?.name}</a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport { useDispatch } from 'react-redux';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { actions } from './features/todos';\nimport { useAppSelector } from './app/hooks';\n\nexport const App: React.FC = () => {\n  const targetTodo = useAppSelector(state => state.currentTodo);\n  const [isLoading, setIsLoading] = useState(false);\n  const dispatch = useDispatch();\n\n  async function loadingTodosFromServer() {\n    setIsLoading(true);\n\n    const todosFromServer = await getTodos();\n\n    try {\n      dispatch(actions.setTodos(todosFromServer));\n    } catch (error) {\n      throw new Error();\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  useEffect(() => {\n    loadingTodosFromServer();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? <Loader /> : <TodoList /> }\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {targetTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}